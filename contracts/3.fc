{-
  TASK 3 - Find and replace binary substring
  Binary string is represented as a cell linked list: string splitted to chunks,
  first chunk stored to the root cell, next one to the cell in ref and so on;
  each cell can have only one ref. 
  Write the method that find and replaces one flags in the binary string
  with another value. Flags and values can be can be of any length, but
  strictly up to 128 bits. The method must replace every flag it finds.
  Flag and the value to be replaced is guaranteed to be greater than 0.
  Lets give a simple example. We have the target flag 101110101 and the value
  to be written 111111111 as inputs, and a linked list of cells, in which the bit
  value of the first cell ends with ...10100001011, and in the ref we have cell that
  starts with 10101000111111...
  The output should be a linked list where the first
  cell ends with ...10100001111, and the second cell starts with 11111000111111...

-}
forall X -> int is_null (X x) asm "ISNULL";
int tlen(tuple t) asm "TLEN";
forall X -> (tuple, ()) push_back (tuple tail, X head) asm "CONS";
forall X -> (tuple, (X)) pop_back (tuple t) asm "UNCONS";

() recv_internal() {
}

(int) _bit(int flag, int index) inline_ref {
  return flag & (1 << index) >> index;
}

;; global int index;

;; return (0, count) if found flag (-1|-2, count) if reached eof without flag
(int, int) get_flag_pos(int flag, int value, int flag_len, int value_len, slice s_current) impure {
  int index = 0;    ;; flag bit index
  int count = 0;    ;; bits read from current slice = position of flag

  slice s = s_current;
  int s_len = s.slice_bits();
;;   slice s = s_current.preload_bits(s_len);

  while (~ s.slice_data_empty?()) {
    int c = s~load_uint(1);
    index += 1;
    while ((c == flag._bit(value_len - index)) & (index < flag_len) & (~ s.slice_data_empty?())) {   ;; we can skip check for flag_len
      c = s~load_uint(1);
      index += 1;
    }

    if (index == flag_len) {          ;; found flag
      return (1, count);
    }
    if (c == flag._bit(value_len - index)) {       ;; flag is still in search, no more bits in slice
      s = s~load_ref().begin_parse();
    } else {
      if (s.slice_data_empty?()) {    ;; flag not found, no more bits in slice
        return (0, s_len);
      }
                                      ;; flag simply not found
      count += index;
      index = 0;
    }
  }
  return (-10, s_len);
}

;; testable
(cell) find_and_replace(int flag, int value, cell linked_list) method_id {
  int flag_len = 0;
  int value_len = 0;
  int index = 0;    ;; flag bit index
  int count = 0;      ;; bits read from current slice

  ;; calculate length of `flag' (number of bits)
  int c = flag;
  while (c > 0) {
    c /= 2;
    flag_len += 1;
  }
  ;; calculate length of `value' (number of bits)
  int c = value;
  while (c > 0) {
    c /= 2;
    value_len += 1;
  }

  ;; TEST: dump bits of message
  slice s = linked_list.begin_parse();
  tuple slices = empty_tuple();
  while (~ s.slice_empty?()) {
;;     slice s = s.begin_parse();
    tuple bits = empty_tuple();
    while (~ s.slice_data_empty?()) {
      int c = s~load_uint(1);

      bits~tpush(c);
    }
    slices~tpush(bits);

    if (s.slice_refs()) {
      s = s~load_ref().begin_parse();
    }
  }

  slice s = linked_list.begin_parse();
  tuple result = empty_tuple();
  int index = 0;    ;; flag bit index
  int count = 0;    ;; bits read from current slice = position of flag
  while (~ s.slice_empty?()) {
    int s_len = s.slice_bits();
    var new_slice = begin_cell();

    int c = s~load_uint(1);
    index += 1;
    while ((c == flag._bit(value_len - index)) & (index < flag_len) & (~ s.slice_data_empty?())) {
      c = s~load_uint(1);
      index += 1;
    }

    if (index == flag_len) {          ;; found flag
      slice str = s~load_bits(count);
      new_slice = new_slice.store_slice(str);
      result~tpush(new_slice);
      slice value_slice = begin_cell().store_uint(value, value_len).end_cell().begin_parse();
      result~tpush(value_slice);
    }

    if (c == flag._bit(value_len - index)) {       ;; flag is still in search, no more bits in slice
      slice str = s~load_bits(count);
      new_slice = new_slice.store_slice(str);
      result~tpush(new_slice);

      if (~ s.slice_refs_empty?()) {
        s = s~load_ref().begin_parse();
      }
    } else {
      count += index;
      index = 0;

      slice str = s~load_bits(count);
      new_slice = new_slice.store_slice(str);
      result~tpush(new_slice);

      if (s.slice_data_empty?()) {    ;; flag not found, no more bits in slice
        if (~ s.slice_refs_empty?()) {
          s = s~load_ref().begin_parse();
        }
      }
      ;; flag simply not found
;;       count += index;
;;       index = 0;
    }
  }

  ;; make cell from tuple items
  tuple slices = empty_tuple();
  while (~ is_null(result)) {
    slice s = result~pop_back();

    tuple bits = empty_tuple();
    while (~ s.slice_data_empty?()) {
      int c = s~load_uint(1);
      bits~tpush(c);
    }
  }

  return begin_cell().end_cell();
}

